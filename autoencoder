import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
from tensorflow.keras.models import Model
from tensorflow.keras.datasets import mnist

# Load the MNIST dataset
(x_train, _), (x_test, _) = mnist.load_data()

# Normalize pixel values to be between 0 and 1
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

# Add a channel dimension to the images
x_train = np.expand_dims(x_train, axis=-1)
x_test = np.expand_dims(x_test, axis=-1)

# Define the CNN autoencoder model
input_img = Input(shape=(28, 28, 1))

# Encoder
x = Conv2D(16, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(8, (3, 3), activation='relu', padding='same')(x)
encoded = MaxPooling2D((2, 2), padding='same')(x)

# Decoder
x = Conv2D(8, (3, 3), activation='relu', padding='same')(encoded)
x = UpSampling2D((2, 2))(x)
x = Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)

# Compile the autoencoder
autoencoder.compile(optimizer='adam', loss='binary_crossentropy')

# Train the autoencoder
autoencoder.fit(x_train, x_train, epochs=10, batch_size=128, shuffle=True, validation_data=(x_test, x_test))

# Create a separate encoder model
encoder = Model(input_img, encoded)

# Encode the test images
encoded_imgs = encoder.predict(x_test)

# Decode the encoded images
decoded_imgs = autoencoder.predict(x_test)

# Display original and reconstructed images
n = 10  # Number of digits to display
plt.figure(figsize=(20, 4))
for i in range(n):
    # Original images
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(x_test[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # Reconstructed images
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

plt.show()




Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz
11490434/11490434 [==============================] - 0s 0us/step
Epoch 1/10
469/469 [==============================] - 81s 163ms/step - loss: 0.1860 - val_loss: 0.0889
Epoch 2/10
469/469 [==============================] - 65s 138ms/step - loss: 0.0862 - val_loss: 0.0827
Epoch 3/10
469/469 [==============================] - 62s 133ms/step - loss: 0.0821 - val_loss: 0.0801
Epoch 4/10
469/469 [==============================] - 62s 133ms/step - loss: 0.0800 - val_loss: 0.0783
Epoch 5/10
469/469 [==============================] - 62s 132ms/step - loss: 0.0785 - val_loss: 0.0772
Epoch 6/10
469/469 [==============================] - 63s 135ms/step - loss: 0.0773 - val_loss: 0.0761
Epoch 7/10
469/469 [==============================] - 63s 135ms/step - loss: 0.0764 - val_loss: 0.0753
Epoch 8/10
469/469 [==============================] - 63s 134ms/step - loss: 0.0757 - val_loss: 0.0747
Epoch 9/10
469/469 [==============================] - 59s 127ms/step - loss: 0.0752 - val_loss: 0.0742
Epoch 10/10
469/469 [==============================] - 61s 130ms/step - loss: 0.0747 - val_loss: 0.0738
313/313 [==============================] - 2s 6ms/step
313/313 [==============================] - 3s 11ms/step
